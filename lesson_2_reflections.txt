What happens when you initialize a repository? Why do you need to do it?
	Basicly it creates a .git file (contents unknow) and somehow registers the fact that this is a repository.  It hasn't really done anything yet, but the full git machinery is in place and ready to go.

	Duh, you can't use git without it.
How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is just what the name implies, a buffer (or pointer) to the names of items you think you'll want to commit. Unlike the working directory it doesn't acutally contain files.  Unlike the repository, it does not contain the history information.
What value do you think it offers?
	OK you want to commit a logically connected group.  You may not have thought of them all, you can add to it before commiting.  On the other hand, you may decide your changes are garbage, and not commit.  Or that one of the files really doesn't need to be changed.
How can you use the staging area to make sure you have one commit per logical change?
	Uh, look at what's there and think about what it does.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	1) I have an algorithm which works but is not optimal.  I discover a new algorithm which should give much better performance.  Better to leave the working version alone and develop the new algorithm implementation independently.  Branches make this easy.
	